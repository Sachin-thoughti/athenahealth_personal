class Solr {

    static getClinicalNoteJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT Patient.PatientKey AS Patient_Id, Patient.PatientEpicId AS Patient_Epic_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, Patient.Ssn AS Patient_Ssn, Patient.Name AS Patient_Name, Patient.FirstName AS Patient_First_Name, Patient.MiddleName AS Patient_Middle_Name, Patient.LastName AS Patient_Last_Name, Patient.Sex as Patient_Gender, DATEDIFF(YEAR, Patient.BirthDate, GETDATE()) AS Patient_Age, Patient.BirthDate as Patient_DOB, Patient.FirstRace AS Patient_Race, Patient.MaritalStatus AS Patient_Marital_Status, ClinicalNoteFact.ClinicalNoteKey AS Fact_Id, ClinicalNoteTextFact.ClinicalNoteTextKey AS Fact_Text_Id, ClinicalNoteFact.Type AS Free_Text_Type, 'Clinical Notes' AS Free_Text_Category, ClinicalNoteTextFact.text AS Free_Text_1, '' as Free_Text_2, '' as Free_Text_3, ClinicalNoteTextFact.Status_CreationInstant as Created_on, ClinicalNoteTextFact.Status_LastUpdatedDate as Modified_on FROM Caboodle_Nov18.Kit.PatientDim AS Patient LEFT JOIN Caboodle_Nov18.Kit.ClinicalNoteFact AS ClinicalNoteFact ON ClinicalNoteFact.PatientKey = Patient.PatientKey LEFT JOIN Caboodle_Nov18.Kit.ClinicalNoteTextFact AS ClinicalNoteTextFact ON ClinicalNoteTextFact.ClinicalNoteKey = ClinicalNoteFact.ClinicalNoteKey WHERE ClinicalNoteTextFact.Status_CreationInstant between '` + start_date + `' and '` + end_date + `'`;
        return sql;
    }

    static getImagingNoteJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT TOP 1000 Patient.PatientKey AS Patient_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, ImagingFact.ImagingKey AS Fact_Id, ImagingTextFact.ImagingTextKey AS Fact_Text_Id, '' AS Free_Text_Type, 'Imaging Notes' AS Free_Text_Category, ImagingTextFact.Narrative AS Free_Text_1, ImagingTextFact.Impression AS Free_Text_2, ImagingTextFact.Addenda AS Free_Text_3, ImagingTextFact.Status_CreationInstant as Created_on, ImagingTextFact.Status_LastUpdatedDate as Modified_on FROM Caboodle_Nov18.Kit.PatientDim AS Patient LEFT JOIN Caboodle_Nov18.Kit.ImagingFact AS ImagingFact ON ImagingFact.PatientKey = Patient.PatientKey LEFT JOIN Caboodle_Nov18.Kit.ImagingTextFact AS ImagingTextFact ON ImagingTextFact.ImagingKey = ImagingFact.ImagingKey WHERE ImagingTextFact.Status_CreationInstant between '` + start_date + `' and '` + end_date + `' AND ImagingTextFact.Narrative != ''`;
        return sql;
    }

    static getLabComponentTextJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT Patient.PatientKey AS Patient_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, LabComponentResultFact.LabComponentResultKey AS Fact_Id, LabComponentResultFact.ResultStatus AS Result_Status, LabComponentResultFact.Value AS Result_Value, LabComponentResultFact.NumericValue AS Result_Numeric_Value, LabComponentResultFact.Unit AS Result_Unit, LabComponentResultFact.ReferenceValues AS Result_Reference_Values, LabComponentResultFact.Abnormal AS Result_Abnormal_Flag, LabComponentDim.Name AS LabComponent_Name, LabComponentDim.Abbreviation AS LabComponent_Abbreviation, LabComponentDim.LoincCode AS LabComponent_LoincCode, LabComponentResultTextFact.LabComponentResultTextKey AS Fact_Text_Id, '' AS Free_Text_Type, 'Lab Component Result Notes' AS Free_Text_Category, LabComponentResultTextFact.Comment AS Free_Text_1, '' as Free_Text_2, '' as Free_Text_3, LabComponentResultTextFact.Status_CreationInstant as Created_on, LabComponentResultTextFact.Status_LastUpdatedDate as Modified_on FROM Caboodle_Nov18.Kit.PatientDim AS Patient LEFT JOIN Caboodle_Nov18.Kit.LabComponentResultFact AS LabComponentResultFact ON LabComponentResultFact.PatientKey = Patient.PatientKey LEFT JOIN Caboodle_Nov18.Kit.LabComponentDim AS LabComponentDim ON LabComponentDim.LabComponentKey = LabComponentResultFact.LabComponentKey LEFT JOIN Caboodle_Nov18.Kit.LabComponentResultTextFact AS LabComponentResultTextFact ON LabComponentResultTextFact.LabComponentResultKey = LabComponentResultFact.LabComponentResultKey WHERE Patient.PrimaryMRN != '' AND Patient.PrimaryMRN IS NOT NULL`;
        return sql;
    }

    static getLabTestNoteJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT * FROM ( SELECT Patient.PatientKey AS Patient_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, LabTestFact.LabTestKey AS Fact_Id, LabTestTextFact.LabTestTextKey AS Fact_Text_Id, '' AS Free_Text_Type, 'Lab Test Notes' AS Free_Text_Category, LabTestTextFact.Narrative AS Free_Text_1, LabTestTextFact.Impression AS Free_Text_2, '' as Free_Text_3, LabTestTextFact.Status_CreationInstant as Created_on, LabTestTextFact.Status_LastUpdatedDate as Modified_on FROM Caboodle_Nov18.Kit.PatientDim AS Patient LEFT JOIN Caboodle_Nov18.Kit.LabTestFact AS LabTestFact ON LabTestFact.PatientKey = Patient.PatientKey LEFT JOIN Caboodle_Nov18.Kit.LabTestTextFact AS LabTestTextFact ON LabTestTextFact.LabTestKey = LabTestFact.LabTestKey WHERE LabTestTextFact.Status_CreationInstant between '` + start_date + `' and '` + end_date + `' ) AS Patients ORDER BY Patient_id ASC`;
        return sql;
    }


    static getMedicationsJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT Patient.PatientKey AS Patient_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, MedicationOrderFact.OrderName AS Medication_Name, MedicationOrderFact.Frequency AS Medication_Frequency, MedicationOrderFact.Route AS Medication_Route, MedicationOrderFact.QuantityUnit AS Medication_QuantityUnit, MedicationOrderFact.DoseUnit AS Medication_DoseUnit, CASE WHEN MedicationOrderFact.StartDateKey = '-1' THEN NULL ELSE  CONVERT(date, cast(MedicationOrderFact.StartDateKey AS VARCHAR)) END AS Medication_StartDate, CASE WHEN MedicationOrderFact.EndDateKey = '-1' THEN NULL ELSE CONVERT(date, cast(MedicationOrderFact.EndDateKey as VARCHAR)) END AS Medication_EndDate, CASE WHEN MedicationOrderFact.DiscontinuedDateKey = '-1' THEN NULL ELSE CONVERT(date, cast(MedicationOrderFact.DiscontinuedDateKey AS VARCHAR)) END AS Medication_DiscontinuedDate, MedicationOrderFact.DiscontinuedTimeOfDayKey AS Medication_DiscontinuedTime, CASE WHEN MedicationOrderFact.OrderedDateKey = '-1' THEN NULL ELSE CONVERT(date, cast(MedicationOrderFact.OrderedDateKey as VARCHAR )) END AS Medication_OrderedDate, MedicationOrderFact.AssociatedDiagnosisComboKey AS Medication_AssociatedDiagnosis, MedicationOrderFact.NumberOfDoses AS Medication_NumberOfDoses, MedicationOrderFact.RefillsWritten AS Medication_RefillsWritten, MedicationOrderFact.MinimumDose AS Medication_MinimumDose, MedicationOrderFact.MaximumDose AS Medication_MaximumDose, MedicationOrderFact.Quantity AS Medication_Quantity, MedicationDim.Gpi AS Medication_Gpi, MedicationDim.Form AS Medication_Form, MedicationDim.PharmaceuticalClass AS Medication_PharmaceuticalClass, MedicationDim.PharmaceuticalSubClass AS Medication_PharmaceuticalSubClass,  MedicationDim.GenericName AS Medication_GenericName, MedicationDim.Gpi AS Medication_Gpi, EncounterFact.Type AS Enounter_Type, CASE WHEN EncounterFact.EndDateKey = '-1' THEN NULL ELSE CONVERT(date, cast(EncounterFact.EndDateKey AS VARCHAR)) END AS Enounter_EndDate,DiagnosisDim.DiagnosisKey AS DiagnosisKey, DiagnosisDim.Name AS Diagnosis_Name, MedicationCodeDim.Code AS Medication_RxNorm_Code, MedicationCodeDim.Type AS Medication_RxNorm_Code_Type FROM Caboodle_Nov18.Kit.PatientDim AS Patient LEFT JOIN Caboodle_Nov18.Kit.MedicationOrderFact AS MedicationOrderFact ON MedicationOrderFact.PatientKey = Patient.PatientKey LEFT JOIN Caboodle_Nov18.Kit.MedicationDim AS MedicationDim ON MedicationDim.MedicationKey = MedicationOrderFact.MedicationKey LEFT JOIN Caboodle_Nov18.Kit.EncounterFact AS EncounterFact ON MedicationOrderFact.EncounterKey = EncounterFact.EncounterKey LEFT JOIN Caboodle_Nov18.Kit.MedicationCodeDim AS MedicationCodeDim ON MedicationDim.MedicationKey = MedicationCodeDim.MedicationKey LEFT JOIN Caboodle_Nov18.Kit.DiagnosisBridge AS DiagnosisBridge ON MedicationOrderFact.AssociatedDiagnosisComboKey = DiagnosisBridge.DiagnosisComboKey LEFT JOIN Caboodle_Nov18.Kit.DiagnosisDim AS DiagnosisDim ON DiagnosisBridge.DiagnosisKey = DiagnosisDim.DiagnosisKey WHERE MedicationOrderFact.Status_CreationInstant between'` + start_date + `' and '` + end_date + `'`;
        return sql;
    }

    static getDiagnosisJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT TOP 10 Patient.PatientKey AS Patient_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, DiagnosisTerminologyDim.Type AS Diagnosis_Type, DiagnosisTerminologyDim.Value AS Diagnosis_Value, DiagnosisTerminologyDim.DisplayString AS Diagnosis_Display_Name, EncounterFact.Type AS Enounter_Type, CASE WHEN EncounterFact.EndDateKey = '-1' THEN NULL ELSE CONVERT(date, cast(EncounterFact.EndDateKey AS VARCHAR)) END AS Enounter_EndDate FROM Caboodle_Nov18.Kit.PatientDim AS Patient LEFT JOIN Caboodle_Nov18.Kit.DiagnosisEventFact AS DiagnosisEventFact ON DiagnosisEventFact.PatientKey = Patient.PatientKey LEFT JOIN Caboodle_Nov18.Kit.DiagnosisTerminologyDim AS DiagnosisTerminologyDim ON DiagnosisTerminologyDim.DiagnosisKey = DiagnosisEventFact.DiagnosisKey LEFT JOIN Caboodle_Nov18.Kit.EncounterFact AS EncounterFact ON EncounterFact.EncounterKey = DiagnosisEventFact.EncounterKey WHERE DiagnosisTerminologyDim.Status_CreationInstant between'` + start_date + `' and '` + end_date + `'`;
        return sql;
    }

    static getProviderJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT Patient.PatientKey AS Patient_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE EncounterFact.EndDateKey END AS Patient_Mrn, ProviderDim.Name AS Provider_Name, ProviderDim.ProviderEpicId AS Provider_Epic_Id, ProviderDim.EmployeeEpicId AS Provider_Employee_Id FROM Caboodle_Nov18.Kit.PatientDim AS Patient LEFT JOIN Caboodle_Nov18.Kit.ProviderDim AS ProviderDim ON Patient.PrimaryCareProviderKey = ProviderDim.ProviderKey`;
        return sql;
    }

    static getProcedureJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT TOP 10000 Patient.PatientKey AS Patient_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, procedureeventfact.procedureeventkey AS Procedure_Event_Id, procedureeventfact.procedurekey AS Procedure_id, proceduredim.patientfriendlyname AS Procedure_Friendly_Name, proceduredim.Name AS Procedure_Name, proceduredim.code AS Procedure_Code, proceduredim.codeset AS Procedure_CodeSet, proceduredim.cptcode AS Procedure_CptCode, procedureorderfact.type AS Procedure_Order_Type, procedureorderfact.class AS Procedure_Order_Class, procedureorderfact.Source AS Procedure_Order_Source, procedureorderfact.Status AS Procedure_Order_Status, procedureorderfact.Mode AS Procedure_Order_Mode, CASE WHEN procedureorderfact.OrderedDateKey = '-1' THEN NULL WHEN procedureorderfact.OrderedDateKey = '-2' THEN NULL ELSE CONVERT(date, cast(procedureorderfact.OrderedDateKey AS VARCHAR)) END AS Procedure_OrderedDate, procedureorderfact.OrderedTimeOfDayKey AS Procedure_OrderedTimeOfDay, EncounterFact.Type AS Enounter_Type, CASE WHEN EncounterFact.EndDateKey = '-1' THEN NULL ELSE CONVERT(date, cast(EncounterFact.EndDateKey AS VARCHAR)) END AS Enounter_EndDate FROM caboodle_nov18.kit.patientdim AS Patient LEFT JOIN caboodle_nov18.kit.procedureeventfact AS ProcedureEventFact ON Patient.patientkey = procedureeventfact.patientkey LEFT JOIN caboodle_nov18.kit.proceduredim AS ProcedureDim ON procedureeventfact.procedurekey = proceduredim.procedurekey LEFT JOIN caboodle_nov18.kit.procedureorderfact AS ProcedureOrderFact ON procedureorderfact.patientkey = Patient.patientkey LEFT JOIN Caboodle_Nov18.Kit.EncounterFact AS EncounterFact ON EncounterFact.EncounterKey = ProcedureOrderFact.EncounterKey WHERE proceduredim.cptcode != ''  AND proceduredim.cptcode != '*Deleted'`;
        return sql;
    }

    static getFlowsheetJson(offset_start, offset_end, start_date, end_date) {
        let sql = `SELECT TOP 1000 Patient.PatientKey AS Patient_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, CASE WHEN FlowsheetValueFact.DateKey = '-1' THEN NULL ELSE CONVERT(date, cast(FlowsheetValueFact.DateKey AS VARCHAR)) END AS Flowsheet_Date, FlowsheetValueFact.TimeOfDayKey AS Flowsheet_TimeOfDay, FlowsheetValueFact.Value AS Flowsheet_Value, FlowsheetRowDim.Name AS Flowsheet_Name, FlowsheetRowDim.DisplayName AS Flowsheet_DisplayName, FlowsheetRowDim.Description AS Flowsheet_Description FROM Caboodle_Nov18.Kit.PatientDim AS Patient LEFT JOIN Caboodle_Nov18.Kit.FlowsheetValueFact AS FlowsheetValueFact ON Patient.patientkey = FlowsheetValueFact.PatientKey LEFT JOIN Caboodle_Nov18.Kit.FlowsheetRowDim AS FlowsheetRowDim ON FlowsheetRowDim.FlowsheetRowKey = FlowsheetValueFact.FlowsheetRowKey WHERE FlowsheetRowDim.DisplayName IS NOT NULL AND Patient.PatientKey > 0`;
        return sql;
    }

    static getPatientJson(offset_start, offset_end) {
        let sql = `SELECT * FROM (SELECT ROW_NUMBER() OVER (ORDER BY PatientKey) AS rownumber, Patient.PatientKey AS Patient_Id, Patient.PatientEpicId AS Patient_Epic_Id, CASE WHEN Patient.PrimaryMRN = '*Deleted' THEN NULL WHEN Patient.PrimaryMRN = '*Unspecified' THEN NULL ELSE Patient.PrimaryMRN END AS Patient_Mrn, Patient.Ssn AS Patient_Ssn, Patient.Name AS Patient_Name, Patient.FirstName AS Patient_First_Name, Patient.MiddleName AS Patient_Middle_Name, Patient.LastName AS Patient_Last_Name, Patient.Sex as Patient_Gender, DATEDIFF(YEAR, Patient.BirthDate, GETDATE()) AS Patient_Age, Patient.BirthDate as Patient_DOB, Patient.FirstRace AS Patient_Race, Patient.MaritalStatus AS Patient_Marital_Status FROM Caboodle_Nov18.Kit.PatientDim AS Patient ) AS Patients WHERE rownumber BETWEEN ` + offset_start + ` AND ` + offset_end + ``;
        return sql;
    }

    static getPatientCount() {
        let sql = `SELECT COUNT(PatientKey) AS DataCount FROM PatientDim`;
        return sql;
    }

    static getDiagnosisMasterCount() {
        let sql = `SELECT COUNT(DISTINCT(Value)) AS DataCount FROM DiagnosisTerminologyDim`;
        return sql;
    }

    static getDiagnosisMasterData(offset_start, offset_end) {
        let sql = `SELECT * FROM(SELECT DISTINCT(Value), Type, DisplayString, ROW_NUMBER() OVER (ORDER BY DiagnosisTerminologyKey) AS rownumber FROM DiagnosisTerminologyDim ) AS Diagnosis WHERE rownumber BETWEEN ` + offset_start + ` AND ` + offset_end + ``;
        return sql;
    }

    static getTestJson() {
        let sql = `SELECT DISTINCT ShortName,ProcedureKey  FROM ProcedureDim WHERE Category LIKE '%IMAGING%'`;
        return sql;
    }

}

module.exports = Solr;